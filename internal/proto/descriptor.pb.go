// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: descriptor.proto

package proto

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnnotationScope int32

const (
	AnnotationScope_AnnotationScopeZero      AnnotationScope = 0
	AnnotationScope_AnnotationScopeModule    AnnotationScope = 1
	AnnotationScope_AnnotationScopeUnion     AnnotationScope = 2
	AnnotationScope_AnnotationScopeStruct    AnnotationScope = 3
	AnnotationScope_AnnotationScopeField     AnnotationScope = 4
	AnnotationScope_AnnotationScopeEnumerant AnnotationScope = 5
	AnnotationScope_AnnotationScopeEnum      AnnotationScope = 6
	AnnotationScope_AnnotationScopeAPI       AnnotationScope = 7
	AnnotationScope_AnnotationScopeAPIMethod AnnotationScope = 8
	AnnotationScope_AnnotationScopeSDK       AnnotationScope = 9
	AnnotationScope_AnnotationScopeSDKMethod AnnotationScope = 10
	AnnotationScope_AnnotationScopeConst     AnnotationScope = 11
	AnnotationScope_AnnotationScopeImport    AnnotationScope = 12
	AnnotationScope_AnnotationScopeStar      AnnotationScope = 13
)

// Enum value maps for AnnotationScope.
var (
	AnnotationScope_name = map[int32]string{
		0:  "AnnotationScopeZero",
		1:  "AnnotationScopeModule",
		2:  "AnnotationScopeUnion",
		3:  "AnnotationScopeStruct",
		4:  "AnnotationScopeField",
		5:  "AnnotationScopeEnumerant",
		6:  "AnnotationScopeEnum",
		7:  "AnnotationScopeAPI",
		8:  "AnnotationScopeAPIMethod",
		9:  "AnnotationScopeSDK",
		10: "AnnotationScopeSDKMethod",
		11: "AnnotationScopeConst",
		12: "AnnotationScopeImport",
		13: "AnnotationScopeStar",
	}
	AnnotationScope_value = map[string]int32{
		"AnnotationScopeZero":      0,
		"AnnotationScopeModule":    1,
		"AnnotationScopeUnion":     2,
		"AnnotationScopeStruct":    3,
		"AnnotationScopeField":     4,
		"AnnotationScopeEnumerant": 5,
		"AnnotationScopeEnum":      6,
		"AnnotationScopeAPI":       7,
		"AnnotationScopeAPIMethod": 8,
		"AnnotationScopeSDK":       9,
		"AnnotationScopeSDKMethod": 10,
		"AnnotationScopeConst":     11,
		"AnnotationScopeImport":    12,
		"AnnotationScopeStar":      13,
	}
)

func (x AnnotationScope) Enum() *AnnotationScope {
	p := new(AnnotationScope)
	*p = x
	return p
}

func (x AnnotationScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnotationScope) Descriptor() protoreflect.EnumDescriptor {
	return file_descriptor_proto_enumTypes[0].Descriptor()
}

func (AnnotationScope) Type() protoreflect.EnumType {
	return &file_descriptor_proto_enumTypes[0]
}

func (x AnnotationScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnotationScope.Descriptor instead.
func (AnnotationScope) EnumDescriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{0}
}

type OperationUnary int32

const (
	OperationUnary_OperationUnaryZero     OperationUnary = 0
	OperationUnary_OperationUnaryPositive OperationUnary = 1
	OperationUnary_OperationUnaryNegative OperationUnary = 2
	OperationUnary_OperationUnaryNot      OperationUnary = 3
)

// Enum value maps for OperationUnary.
var (
	OperationUnary_name = map[int32]string{
		0: "OperationUnaryZero",
		1: "OperationUnaryPositive",
		2: "OperationUnaryNegative",
		3: "OperationUnaryNot",
	}
	OperationUnary_value = map[string]int32{
		"OperationUnaryZero":     0,
		"OperationUnaryPositive": 1,
		"OperationUnaryNegative": 2,
		"OperationUnaryNot":      3,
	}
)

func (x OperationUnary) Enum() *OperationUnary {
	p := new(OperationUnary)
	*p = x
	return p
}

func (x OperationUnary) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationUnary) Descriptor() protoreflect.EnumDescriptor {
	return file_descriptor_proto_enumTypes[1].Descriptor()
}

func (OperationUnary) Type() protoreflect.EnumType {
	return &file_descriptor_proto_enumTypes[1]
}

func (x OperationUnary) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationUnary.Descriptor instead.
func (OperationUnary) EnumDescriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{1}
}

type OperationBinary int32

const (
	OperationBinary_OperationBinaryZero             OperationBinary = 0
	OperationBinary_OperationBinaryOr               OperationBinary = 1
	OperationBinary_OperationBinaryAnd              OperationBinary = 2
	OperationBinary_OperationBinaryEqual            OperationBinary = 3
	OperationBinary_OperationBinaryNotEqual         OperationBinary = 4
	OperationBinary_OperationBinaryLessThan         OperationBinary = 5
	OperationBinary_OperationBinaryLessThanEqual    OperationBinary = 6
	OperationBinary_OperationBinaryGreaterThan      OperationBinary = 7
	OperationBinary_OperationBinaryGreaterThanEqual OperationBinary = 8
	OperationBinary_OperationBinaryAdd              OperationBinary = 9
	OperationBinary_OperationBinarySubtract         OperationBinary = 10
	OperationBinary_OperationBinaryBinOr            OperationBinary = 11
	OperationBinary_OperationBinaryBinAnd           OperationBinary = 12
	OperationBinary_OperationBinaryBitXor           OperationBinary = 13
	OperationBinary_OperationBinaryShiftLeft        OperationBinary = 14
	OperationBinary_OperationBinaryShiftRight       OperationBinary = 15
	OperationBinary_OperationBinaryMultiply         OperationBinary = 16
	OperationBinary_OperationBinaryDivide           OperationBinary = 17
	OperationBinary_OperationBinaryModulo           OperationBinary = 18
)

// Enum value maps for OperationBinary.
var (
	OperationBinary_name = map[int32]string{
		0:  "OperationBinaryZero",
		1:  "OperationBinaryOr",
		2:  "OperationBinaryAnd",
		3:  "OperationBinaryEqual",
		4:  "OperationBinaryNotEqual",
		5:  "OperationBinaryLessThan",
		6:  "OperationBinaryLessThanEqual",
		7:  "OperationBinaryGreaterThan",
		8:  "OperationBinaryGreaterThanEqual",
		9:  "OperationBinaryAdd",
		10: "OperationBinarySubtract",
		11: "OperationBinaryBinOr",
		12: "OperationBinaryBinAnd",
		13: "OperationBinaryBitXor",
		14: "OperationBinaryShiftLeft",
		15: "OperationBinaryShiftRight",
		16: "OperationBinaryMultiply",
		17: "OperationBinaryDivide",
		18: "OperationBinaryModulo",
	}
	OperationBinary_value = map[string]int32{
		"OperationBinaryZero":             0,
		"OperationBinaryOr":               1,
		"OperationBinaryAnd":              2,
		"OperationBinaryEqual":            3,
		"OperationBinaryNotEqual":         4,
		"OperationBinaryLessThan":         5,
		"OperationBinaryLessThanEqual":    6,
		"OperationBinaryGreaterThan":      7,
		"OperationBinaryGreaterThanEqual": 8,
		"OperationBinaryAdd":              9,
		"OperationBinarySubtract":         10,
		"OperationBinaryBinOr":            11,
		"OperationBinaryBinAnd":           12,
		"OperationBinaryBitXor":           13,
		"OperationBinaryShiftLeft":        14,
		"OperationBinaryShiftRight":       15,
		"OperationBinaryMultiply":         16,
		"OperationBinaryDivide":           17,
		"OperationBinaryModulo":           18,
	}
)

func (x OperationBinary) Enum() *OperationBinary {
	p := new(OperationBinary)
	*p = x
	return p
}

func (x OperationBinary) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationBinary) Descriptor() protoreflect.EnumDescriptor {
	return file_descriptor_proto_enumTypes[2].Descriptor()
}

func (OperationBinary) Type() protoreflect.EnumType {
	return &file_descriptor_proto_enumTypes[2]
}

func (x OperationBinary) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationBinary.Descriptor instead.
func (OperationBinary) EnumDescriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{2}
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []*Module `protobuf:"bytes,1,rep,name=Modules,proto3" json:"Modules,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usually a file path, relative to some local root. May also be a full URI
	// including a protocol, etc., such as file:///path/to/file or
	// https://domain/path/to/file.
	URI                    string                   `protobuf:"bytes,1,opt,name=URI,proto3" json:"URI,omitempty"`
	UID                    uint64                   `protobuf:"varint,2,opt,name=UID,proto3" json:"UID,omitempty"`
	ProtobufPackage        string                   `protobuf:"bytes,3,opt,name=ProtobufPackage,proto3" json:"ProtobufPackage,omitempty"`
	AnnotationApplications []*AnnotationApplication `protobuf:"bytes,4,rep,name=AnnotationApplications,proto3" json:"AnnotationApplications,omitempty"`
	Imports                []*Import                `protobuf:"bytes,5,rep,name=Imports,proto3" json:"Imports,omitempty"`
	Structs                []*Struct                `protobuf:"bytes,6,rep,name=Structs,proto3" json:"Structs,omitempty"`
	Enums                  []*Enum                  `protobuf:"bytes,7,rep,name=Enums,proto3" json:"Enums,omitempty"`
	APIs                   []*API                   `protobuf:"bytes,8,rep,name=APIs,proto3" json:"APIs,omitempty"`
	SDKs                   []*SDK                   `protobuf:"bytes,9,rep,name=SDKs,proto3" json:"SDKs,omitempty"`
	Constants              []*Constant              `protobuf:"bytes,10,rep,name=Constants,proto3" json:"Constants,omitempty"`
	Annotations            []*Annotation            `protobuf:"bytes,11,rep,name=Annotations,proto3" json:"Annotations,omitempty"`
	DotImports             []*DotImport             `protobuf:"bytes,12,rep,name=DotImports,proto3" json:"DotImports,omitempty"`
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{1}
}

func (x *Module) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *Module) GetUID() uint64 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *Module) GetProtobufPackage() string {
	if x != nil {
		return x.ProtobufPackage
	}
	return ""
}

func (x *Module) GetAnnotationApplications() []*AnnotationApplication {
	if x != nil {
		return x.AnnotationApplications
	}
	return nil
}

func (x *Module) GetImports() []*Import {
	if x != nil {
		return x.Imports
	}
	return nil
}

func (x *Module) GetStructs() []*Struct {
	if x != nil {
		return x.Structs
	}
	return nil
}

func (x *Module) GetEnums() []*Enum {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *Module) GetAPIs() []*API {
	if x != nil {
		return x.APIs
	}
	return nil
}

func (x *Module) GetSDKs() []*SDK {
	if x != nil {
		return x.SDKs
	}
	return nil
}

func (x *Module) GetConstants() []*Constant {
	if x != nil {
		return x.Constants
	}
	return nil
}

func (x *Module) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Module) GetDotImports() []*DotImport {
	if x != nil {
		return x.DotImports
	}
	return nil
}

type Import struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleUID    uint64        `protobuf:"varint,1,opt,name=ModuleUID,proto3" json:"ModuleUID,omitempty"`
	ImportedURI  string        `protobuf:"bytes,2,opt,name=ImportedURI,proto3" json:"ImportedURI,omitempty"`
	ImportedUID  uint64        `protobuf:"varint,3,opt,name=ImportedUID,proto3" json:"ImportedUID,omitempty"`
	Alias        string        `protobuf:"bytes,4,opt,name=Alias,proto3" json:"Alias,omitempty"`
	IsDot        bool          `protobuf:"varint,5,opt,name=IsDot,proto3" json:"IsDot,omitempty"`
	CommentBlock *CommentBlock `protobuf:"bytes,6,opt,name=CommentBlock,proto3" json:"CommentBlock,omitempty"`
}

func (x *Import) Reset() {
	*x = Import{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Import) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Import) ProtoMessage() {}

func (x *Import) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Import.ProtoReflect.Descriptor instead.
func (*Import) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{2}
}

func (x *Import) GetModuleUID() uint64 {
	if x != nil {
		return x.ModuleUID
	}
	return 0
}

func (x *Import) GetImportedURI() string {
	if x != nil {
		return x.ImportedURI
	}
	return ""
}

func (x *Import) GetImportedUID() uint64 {
	if x != nil {
		return x.ImportedUID
	}
	return 0
}

func (x *Import) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Import) GetIsDot() bool {
	if x != nil {
		return x.IsDot
	}
	return false
}

func (x *Import) GetCommentBlock() *CommentBlock {
	if x != nil {
		return x.CommentBlock
	}
	return nil
}

type DotImport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DotImport describe a type that was part of a public import in a protobuf
	// file. These become part of the module descriptor so that they can appear
	// as types defined directly in the module using the dot import feature.
	Name      string         `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Reference *TypeReference `protobuf:"bytes,2,opt,name=Reference,proto3" json:"Reference,omitempty"`
}

func (x *DotImport) Reset() {
	*x = DotImport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DotImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DotImport) ProtoMessage() {}

func (x *DotImport) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DotImport.ProtoReflect.Descriptor instead.
func (*DotImport) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{3}
}

func (x *DotImport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DotImport) GetReference() *TypeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

type Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference              *TypeReference           `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name                   *TypeName                `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Fields                 []*Field                 `protobuf:"bytes,3,rep,name=Fields,proto3" json:"Fields,omitempty"`
	Unions                 []*Union                 `protobuf:"bytes,4,rep,name=Unions,proto3" json:"Unions,omitempty"`
	Reserved               []*ReservedRange         `protobuf:"bytes,5,rep,name=Reserved,proto3" json:"Reserved,omitempty"`
	CommentBlock           *CommentBlock            `protobuf:"bytes,6,opt,name=CommentBlock,proto3" json:"CommentBlock,omitempty"`
	AnnotationApplications []*AnnotationApplication `protobuf:"bytes,7,rep,name=AnnotationApplications,proto3" json:"AnnotationApplications,omitempty"`
	IsSynthetic            bool                     `protobuf:"varint,8,opt,name=IsSynthetic,proto3" json:"IsSynthetic,omitempty"`
}

func (x *Struct) Reset() {
	*x = Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct) ProtoMessage() {}

func (x *Struct) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct.ProtoReflect.Descriptor instead.
func (*Struct) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{4}
}

func (x *Struct) GetReference() *TypeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Struct) GetName() *TypeName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Struct) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Struct) GetUnions() []*Union {
	if x != nil {
		return x.Unions
	}
	return nil
}

func (x *Struct) GetReserved() []*ReservedRange {
	if x != nil {
		return x.Reserved
	}
	return nil
}

func (x *Struct) GetCommentBlock() *CommentBlock {
	if x != nil {
		return x.CommentBlock
	}
	return nil
}

func (x *Struct) GetAnnotationApplications() []*AnnotationApplication {
	if x != nil {
		return x.AnnotationApplications
	}
	return nil
}

func (x *Struct) GetIsSynthetic() bool {
	if x != nil {
		return x.IsSynthetic
	}
	return false
}

type ReservedRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint64 `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End   uint64 `protobuf:"varint,2,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *ReservedRange) Reset() {
	*x = ReservedRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservedRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservedRange) ProtoMessage() {}

func (x *ReservedRange) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservedRange.ProtoReflect.Descriptor instead.
func (*ReservedRange) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{5}
}

func (x *ReservedRange) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReservedRange) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference    *AttributeReference `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name         string              `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type         *TypeSpecifier      `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	DefaultValue *Value              `protobuf:"bytes,4,opt,name=DefaultValue,proto3" json:"DefaultValue,omitempty"`
	// if set, gives the index of a union in the containing struct's Unions list.
	// This field is a member of that union.
	UnionIndex             *uint64                  `protobuf:"varint,5,opt,name=UnionIndex,proto3,oneof" json:"UnionIndex,omitempty"`
	CommentBlock           *CommentBlock            `protobuf:"bytes,6,opt,name=CommentBlock,proto3" json:"CommentBlock,omitempty"`
	AnnotationApplications []*AnnotationApplication `protobuf:"bytes,7,rep,name=AnnotationApplications,proto3" json:"AnnotationApplications,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{6}
}

func (x *Field) GetReference() *AttributeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() *TypeSpecifier {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Field) GetDefaultValue() *Value {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *Field) GetUnionIndex() uint64 {
	if x != nil && x.UnionIndex != nil {
		return *x.UnionIndex
	}
	return 0
}

func (x *Field) GetCommentBlock() *CommentBlock {
	if x != nil {
		return x.CommentBlock
	}
	return nil
}

func (x *Field) GetAnnotationApplications() []*AnnotationApplication {
	if x != nil {
		return x.AnnotationApplications
	}
	return nil
}

type Union struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference              *AttributeReference      `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name                   string                   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	CommentBlock           *CommentBlock            `protobuf:"bytes,3,opt,name=CommentBlock,proto3" json:"CommentBlock,omitempty"`
	AnnotationApplications []*AnnotationApplication `protobuf:"bytes,4,rep,name=AnnotationApplications,proto3" json:"AnnotationApplications,omitempty"`
}

func (x *Union) Reset() {
	*x = Union{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Union) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Union) ProtoMessage() {}

func (x *Union) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Union.ProtoReflect.Descriptor instead.
func (*Union) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{7}
}

func (x *Union) GetReference() *AttributeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Union) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Union) GetCommentBlock() *CommentBlock {
	if x != nil {
		return x.CommentBlock
	}
	return nil
}

func (x *Union) GetAnnotationApplications() []*AnnotationApplication {
	if x != nil {
		return x.AnnotationApplications
	}
	return nil
}

type Enum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference              *TypeReference           `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name                   string                   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Enumerants             []*Enumerant             `protobuf:"bytes,3,rep,name=Enumerants,proto3" json:"Enumerants,omitempty"`
	Reserved               []*ReservedRange         `protobuf:"bytes,4,rep,name=Reserved,proto3" json:"Reserved,omitempty"`
	ReservedNames          []string                 `protobuf:"bytes,5,rep,name=ReservedNames,proto3" json:"ReservedNames,omitempty"`
	CommentBlock           *CommentBlock            `protobuf:"bytes,6,opt,name=CommentBlock,proto3" json:"CommentBlock,omitempty"`
	AnnotationApplications []*AnnotationApplication `protobuf:"bytes,7,rep,name=AnnotationApplications,proto3" json:"AnnotationApplications,omitempty"`
}

func (x *Enum) Reset() {
	*x = Enum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enum) ProtoMessage() {}

func (x *Enum) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enum.ProtoReflect.Descriptor instead.
func (*Enum) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{8}
}

func (x *Enum) GetReference() *TypeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Enum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enum) GetEnumerants() []*Enumerant {
	if x != nil {
		return x.Enumerants
	}
	return nil
}

func (x *Enum) GetReserved() []*ReservedRange {
	if x != nil {
		return x.Reserved
	}
	return nil
}

func (x *Enum) GetReservedNames() []string {
	if x != nil {
		return x.ReservedNames
	}
	return nil
}

func (x *Enum) GetCommentBlock() *CommentBlock {
	if x != nil {
		return x.CommentBlock
	}
	return nil
}

func (x *Enum) GetAnnotationApplications() []*AnnotationApplication {
	if x != nil {
		return x.AnnotationApplications
	}
	return nil
}

type Enumerant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference              *AttributeReference      `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name                   string                   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	CommentBlock           *CommentBlock            `protobuf:"bytes,3,opt,name=CommentBlock,proto3" json:"CommentBlock,omitempty"`
	AnnotationApplications []*AnnotationApplication `protobuf:"bytes,4,rep,name=AnnotationApplications,proto3" json:"AnnotationApplications,omitempty"`
}

func (x *Enumerant) Reset() {
	*x = Enumerant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enumerant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enumerant) ProtoMessage() {}

func (x *Enumerant) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enumerant.ProtoReflect.Descriptor instead.
func (*Enumerant) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{9}
}

func (x *Enumerant) GetReference() *AttributeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Enumerant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enumerant) GetCommentBlock() *CommentBlock {
	if x != nil {
		return x.CommentBlock
	}
	return nil
}

func (x *Enumerant) GetAnnotationApplications() []*AnnotationApplication {
	if x != nil {
		return x.AnnotationApplications
	}
	return nil
}

type API struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference              *TypeReference           `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name                   *TypeName                `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Methods                []*APIMethod             `protobuf:"bytes,3,rep,name=Methods,proto3" json:"Methods,omitempty"`
	Extends                []*TypeSpecifier         `protobuf:"bytes,4,rep,name=Extends,proto3" json:"Extends,omitempty"`
	Reserved               []*ReservedRange         `protobuf:"bytes,5,rep,name=Reserved,proto3" json:"Reserved,omitempty"`
	ReservedNames          []string                 `protobuf:"bytes,6,rep,name=ReservedNames,proto3" json:"ReservedNames,omitempty"`
	CommentBlock           *CommentBlock            `protobuf:"bytes,7,opt,name=CommentBlock,proto3" json:"CommentBlock,omitempty"`
	AnnotationApplications []*AnnotationApplication `protobuf:"bytes,8,rep,name=AnnotationApplications,proto3" json:"AnnotationApplications,omitempty"`
}

func (x *API) Reset() {
	*x = API{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API) ProtoMessage() {}

func (x *API) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API.ProtoReflect.Descriptor instead.
func (*API) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{10}
}

func (x *API) GetReference() *TypeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *API) GetName() *TypeName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *API) GetMethods() []*APIMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *API) GetExtends() []*TypeSpecifier {
	if x != nil {
		return x.Extends
	}
	return nil
}

func (x *API) GetReserved() []*ReservedRange {
	if x != nil {
		return x.Reserved
	}
	return nil
}

func (x *API) GetReservedNames() []string {
	if x != nil {
		return x.ReservedNames
	}
	return nil
}

func (x *API) GetCommentBlock() *CommentBlock {
	if x != nil {
		return x.CommentBlock
	}
	return nil
}

func (x *API) GetAnnotationApplications() []*AnnotationApplication {
	if x != nil {
		return x.AnnotationApplications
	}
	return nil
}

type APIMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference              *AttributeReference      `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name                   string                   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Input                  *TypeSpecifier           `protobuf:"bytes,3,opt,name=Input,proto3" json:"Input,omitempty"`
	Output                 *TypeSpecifier           `protobuf:"bytes,4,opt,name=Output,proto3" json:"Output,omitempty"`
	CommentBlock           *CommentBlock            `protobuf:"bytes,5,opt,name=CommentBlock,proto3" json:"CommentBlock,omitempty"`
	AnnotationApplications []*AnnotationApplication `protobuf:"bytes,6,rep,name=AnnotationApplications,proto3" json:"AnnotationApplications,omitempty"`
}

func (x *APIMethod) Reset() {
	*x = APIMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIMethod) ProtoMessage() {}

func (x *APIMethod) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIMethod.ProtoReflect.Descriptor instead.
func (*APIMethod) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{11}
}

func (x *APIMethod) GetReference() *AttributeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *APIMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIMethod) GetInput() *TypeSpecifier {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *APIMethod) GetOutput() *TypeSpecifier {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *APIMethod) GetCommentBlock() *CommentBlock {
	if x != nil {
		return x.CommentBlock
	}
	return nil
}

func (x *APIMethod) GetAnnotationApplications() []*AnnotationApplication {
	if x != nil {
		return x.AnnotationApplications
	}
	return nil
}

type SDK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference              *TypeReference           `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name                   *TypeName                `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Methods                []*SDKMethod             `protobuf:"bytes,3,rep,name=Methods,proto3" json:"Methods,omitempty"`
	Extends                []*TypeSpecifier         `protobuf:"bytes,4,rep,name=Extends,proto3" json:"Extends,omitempty"`
	Reserved               []*ReservedRange         `protobuf:"bytes,5,rep,name=Reserved,proto3" json:"Reserved,omitempty"`
	ReservedNames          []string                 `protobuf:"bytes,6,rep,name=ReservedNames,proto3" json:"ReservedNames,omitempty"`
	CommentBlock           *CommentBlock            `protobuf:"bytes,7,opt,name=CommentBlock,proto3" json:"CommentBlock,omitempty"`
	AnnotationApplications []*AnnotationApplication `protobuf:"bytes,8,rep,name=AnnotationApplications,proto3" json:"AnnotationApplications,omitempty"`
}

func (x *SDK) Reset() {
	*x = SDK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDK) ProtoMessage() {}

func (x *SDK) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDK.ProtoReflect.Descriptor instead.
func (*SDK) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{12}
}

func (x *SDK) GetReference() *TypeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *SDK) GetName() *TypeName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SDK) GetMethods() []*SDKMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *SDK) GetExtends() []*TypeSpecifier {
	if x != nil {
		return x.Extends
	}
	return nil
}

func (x *SDK) GetReserved() []*ReservedRange {
	if x != nil {
		return x.Reserved
	}
	return nil
}

func (x *SDK) GetReservedNames() []string {
	if x != nil {
		return x.ReservedNames
	}
	return nil
}

func (x *SDK) GetCommentBlock() *CommentBlock {
	if x != nil {
		return x.CommentBlock
	}
	return nil
}

func (x *SDK) GetAnnotationApplications() []*AnnotationApplication {
	if x != nil {
		return x.AnnotationApplications
	}
	return nil
}

type SDKMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference              *AttributeReference      `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name                   string                   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Input                  []*SDKMethodInput        `protobuf:"bytes,3,rep,name=Input,proto3" json:"Input,omitempty"`
	Output                 *TypeSpecifier           `protobuf:"bytes,4,opt,name=Output,proto3" json:"Output,omitempty"`
	NoThrows               bool                     `protobuf:"varint,5,opt,name=NoThrows,proto3" json:"NoThrows,omitempty"`
	CommentBlock           *CommentBlock            `protobuf:"bytes,6,opt,name=CommentBlock,proto3" json:"CommentBlock,omitempty"`
	AnnotationApplications []*AnnotationApplication `protobuf:"bytes,7,rep,name=AnnotationApplications,proto3" json:"AnnotationApplications,omitempty"`
}

func (x *SDKMethod) Reset() {
	*x = SDKMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKMethod) ProtoMessage() {}

func (x *SDKMethod) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKMethod.ProtoReflect.Descriptor instead.
func (*SDKMethod) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{13}
}

func (x *SDKMethod) GetReference() *AttributeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *SDKMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SDKMethod) GetInput() []*SDKMethodInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SDKMethod) GetOutput() *TypeSpecifier {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *SDKMethod) GetNoThrows() bool {
	if x != nil {
		return x.NoThrows
	}
	return false
}

func (x *SDKMethod) GetCommentBlock() *CommentBlock {
	if x != nil {
		return x.CommentBlock
	}
	return nil
}

func (x *SDKMethod) GetAnnotationApplications() []*AnnotationApplication {
	if x != nil {
		return x.AnnotationApplications
	}
	return nil
}

type SDKMethodInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference *SDKInputReference `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name      string             `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type      *TypeSpecifier     `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *SDKMethodInput) Reset() {
	*x = SDKMethodInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKMethodInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKMethodInput) ProtoMessage() {}

func (x *SDKMethodInput) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKMethodInput.ProtoReflect.Descriptor instead.
func (*SDKMethodInput) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{14}
}

func (x *SDKMethodInput) GetReference() *SDKInputReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *SDKMethodInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SDKMethodInput) GetType() *TypeSpecifier {
	if x != nil {
		return x.Type
	}
	return nil
}

type SDKInputReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleUID    uint64 `protobuf:"varint,1,opt,name=ModuleUID,proto3" json:"ModuleUID,omitempty"`
	TypeUID      uint64 `protobuf:"varint,2,opt,name=TypeUID,proto3" json:"TypeUID,omitempty"`
	AttributeUID uint64 `protobuf:"varint,3,opt,name=AttributeUID,proto3" json:"AttributeUID,omitempty"`
	InputUID     uint64 `protobuf:"varint,4,opt,name=InputUID,proto3" json:"InputUID,omitempty"`
}

func (x *SDKInputReference) Reset() {
	*x = SDKInputReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKInputReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKInputReference) ProtoMessage() {}

func (x *SDKInputReference) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKInputReference.ProtoReflect.Descriptor instead.
func (*SDKInputReference) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{15}
}

func (x *SDKInputReference) GetModuleUID() uint64 {
	if x != nil {
		return x.ModuleUID
	}
	return 0
}

func (x *SDKInputReference) GetTypeUID() uint64 {
	if x != nil {
		return x.TypeUID
	}
	return 0
}

func (x *SDKInputReference) GetAttributeUID() uint64 {
	if x != nil {
		return x.AttributeUID
	}
	return 0
}

func (x *SDKInputReference) GetInputUID() uint64 {
	if x != nil {
		return x.InputUID
	}
	return 0
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference              *TypeReference    `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name                   string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Scopes                 []AnnotationScope `protobuf:"varint,3,rep,packed,name=Scopes,proto3,enum=AnnotationScope" json:"Scopes,omitempty"`
	Type                   *TypeSpecifier    `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	DescriptorCommentBlock *CommentBlock     `protobuf:"bytes,5,opt,name=DescriptorCommentBlock,proto3" json:"DescriptorCommentBlock,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{16}
}

func (x *Annotation) GetReference() *TypeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Annotation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Annotation) GetScopes() []AnnotationScope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *Annotation) GetType() *TypeSpecifier {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Annotation) GetDescriptorCommentBlock() *CommentBlock {
	if x != nil {
		return x.DescriptorCommentBlock
	}
	return nil
}

type Constant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference              *TypeReference           `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Name                   string                   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type                   *TypeSpecifier           `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Value                  *Value                   `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	AnnotationApplications []*AnnotationApplication `protobuf:"bytes,5,rep,name=AnnotationApplications,proto3" json:"AnnotationApplications,omitempty"`
	CommentBlock           *CommentBlock            `protobuf:"bytes,6,opt,name=CommentBlock,proto3" json:"CommentBlock,omitempty"`
}

func (x *Constant) Reset() {
	*x = Constant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constant) ProtoMessage() {}

func (x *Constant) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constant.ProtoReflect.Descriptor instead.
func (*Constant) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{17}
}

func (x *Constant) GetReference() *TypeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Constant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Constant) GetType() *TypeSpecifier {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Constant) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Constant) GetAnnotationApplications() []*AnnotationApplication {
	if x != nil {
		return x.AnnotationApplications
	}
	return nil
}

func (x *Constant) GetCommentBlock() *CommentBlock {
	if x != nil {
		return x.CommentBlock
	}
	return nil
}

type AnnotationApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotation *TypeSpecifier `protobuf:"bytes,1,opt,name=Annotation,proto3" json:"Annotation,omitempty"`
	Value      *Value         `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *AnnotationApplication) Reset() {
	*x = AnnotationApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationApplication) ProtoMessage() {}

func (x *AnnotationApplication) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationApplication.ProtoReflect.Descriptor instead.
func (*AnnotationApplication) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{18}
}

func (x *AnnotationApplication) GetAnnotation() *TypeSpecifier {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *AnnotationApplication) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Value_Bool
	//	*Value_Text
	//	*Value_Data
	//	*Value_Int8
	//	*Value_Int16
	//	*Value_Int32
	//	*Value_Int64
	//	*Value_UInt8
	//	*Value_UInt16
	//	*Value_UInt32
	//	*Value_UInt64
	//	*Value_Float32
	//	*Value_Float64
	//	*Value_List
	//	*Value_Struct
	//	*Value_Enumerant
	//	*Value_Identifier
	//	*Value_Unary
	//	*Value_Binary
	Kind isValue_Kind `protobuf_oneof:"Kind"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{19}
}

func (m *Value) GetKind() isValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Value) GetBool() *ValueBool {
	if x, ok := x.GetKind().(*Value_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *Value) GetText() *ValueText {
	if x, ok := x.GetKind().(*Value_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Value) GetData() *ValueData {
	if x, ok := x.GetKind().(*Value_Data); ok {
		return x.Data
	}
	return nil
}

func (x *Value) GetInt8() *ValueInt8 {
	if x, ok := x.GetKind().(*Value_Int8); ok {
		return x.Int8
	}
	return nil
}

func (x *Value) GetInt16() *ValueInt16 {
	if x, ok := x.GetKind().(*Value_Int16); ok {
		return x.Int16
	}
	return nil
}

func (x *Value) GetInt32() *ValueInt32 {
	if x, ok := x.GetKind().(*Value_Int32); ok {
		return x.Int32
	}
	return nil
}

func (x *Value) GetInt64() *ValueInt64 {
	if x, ok := x.GetKind().(*Value_Int64); ok {
		return x.Int64
	}
	return nil
}

func (x *Value) GetUInt8() *ValueUInt8 {
	if x, ok := x.GetKind().(*Value_UInt8); ok {
		return x.UInt8
	}
	return nil
}

func (x *Value) GetUInt16() *ValueUInt16 {
	if x, ok := x.GetKind().(*Value_UInt16); ok {
		return x.UInt16
	}
	return nil
}

func (x *Value) GetUInt32() *ValueUInt32 {
	if x, ok := x.GetKind().(*Value_UInt32); ok {
		return x.UInt32
	}
	return nil
}

func (x *Value) GetUInt64() *ValueUInt64 {
	if x, ok := x.GetKind().(*Value_UInt64); ok {
		return x.UInt64
	}
	return nil
}

func (x *Value) GetFloat32() *ValueFloat32 {
	if x, ok := x.GetKind().(*Value_Float32); ok {
		return x.Float32
	}
	return nil
}

func (x *Value) GetFloat64() *ValueFloat64 {
	if x, ok := x.GetKind().(*Value_Float64); ok {
		return x.Float64
	}
	return nil
}

func (x *Value) GetList() *ValueList {
	if x, ok := x.GetKind().(*Value_List); ok {
		return x.List
	}
	return nil
}

func (x *Value) GetStruct() *ValueStruct {
	if x, ok := x.GetKind().(*Value_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *Value) GetEnumerant() *AttributeReference {
	if x, ok := x.GetKind().(*Value_Enumerant); ok {
		return x.Enumerant
	}
	return nil
}

func (x *Value) GetIdentifier() *ValueIdentifier {
	if x, ok := x.GetKind().(*Value_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *Value) GetUnary() *ValueUnary {
	if x, ok := x.GetKind().(*Value_Unary); ok {
		return x.Unary
	}
	return nil
}

func (x *Value) GetBinary() *ValueBinary {
	if x, ok := x.GetKind().(*Value_Binary); ok {
		return x.Binary
	}
	return nil
}

type isValue_Kind interface {
	isValue_Kind()
}

type Value_Bool struct {
	Bool *ValueBool `protobuf:"bytes,2,opt,name=Bool,proto3,oneof"`
}

type Value_Text struct {
	Text *ValueText `protobuf:"bytes,3,opt,name=Text,proto3,oneof"`
}

type Value_Data struct {
	Data *ValueData `protobuf:"bytes,4,opt,name=Data,proto3,oneof"`
}

type Value_Int8 struct {
	Int8 *ValueInt8 `protobuf:"bytes,5,opt,name=Int8,proto3,oneof"`
}

type Value_Int16 struct {
	Int16 *ValueInt16 `protobuf:"bytes,6,opt,name=Int16,proto3,oneof"`
}

type Value_Int32 struct {
	Int32 *ValueInt32 `protobuf:"bytes,7,opt,name=Int32,proto3,oneof"`
}

type Value_Int64 struct {
	Int64 *ValueInt64 `protobuf:"bytes,8,opt,name=Int64,proto3,oneof"`
}

type Value_UInt8 struct {
	UInt8 *ValueUInt8 `protobuf:"bytes,9,opt,name=UInt8,proto3,oneof"`
}

type Value_UInt16 struct {
	UInt16 *ValueUInt16 `protobuf:"bytes,10,opt,name=UInt16,proto3,oneof"`
}

type Value_UInt32 struct {
	UInt32 *ValueUInt32 `protobuf:"bytes,11,opt,name=UInt32,proto3,oneof"`
}

type Value_UInt64 struct {
	UInt64 *ValueUInt64 `protobuf:"bytes,12,opt,name=UInt64,proto3,oneof"`
}

type Value_Float32 struct {
	Float32 *ValueFloat32 `protobuf:"bytes,13,opt,name=Float32,proto3,oneof"`
}

type Value_Float64 struct {
	Float64 *ValueFloat64 `protobuf:"bytes,14,opt,name=Float64,proto3,oneof"`
}

type Value_List struct {
	List *ValueList `protobuf:"bytes,15,opt,name=List,proto3,oneof"`
}

type Value_Struct struct {
	Struct *ValueStruct `protobuf:"bytes,17,opt,name=Struct,proto3,oneof"`
}

type Value_Enumerant struct {
	Enumerant *AttributeReference `protobuf:"bytes,18,opt,name=Enumerant,proto3,oneof"`
}

type Value_Identifier struct {
	Identifier *ValueIdentifier `protobuf:"bytes,19,opt,name=Identifier,proto3,oneof"`
}

type Value_Unary struct {
	Unary *ValueUnary `protobuf:"bytes,20,opt,name=Unary,proto3,oneof"`
}

type Value_Binary struct {
	Binary *ValueBinary `protobuf:"bytes,21,opt,name=Binary,proto3,oneof"`
}

func (*Value_Bool) isValue_Kind() {}

func (*Value_Text) isValue_Kind() {}

func (*Value_Data) isValue_Kind() {}

func (*Value_Int8) isValue_Kind() {}

func (*Value_Int16) isValue_Kind() {}

func (*Value_Int32) isValue_Kind() {}

func (*Value_Int64) isValue_Kind() {}

func (*Value_UInt8) isValue_Kind() {}

func (*Value_UInt16) isValue_Kind() {}

func (*Value_UInt32) isValue_Kind() {}

func (*Value_UInt64) isValue_Kind() {}

func (*Value_Float32) isValue_Kind() {}

func (*Value_Float64) isValue_Kind() {}

func (*Value_List) isValue_Kind() {}

func (*Value_Struct) isValue_Kind() {}

func (*Value_Enumerant) isValue_Kind() {}

func (*Value_Identifier) isValue_Kind() {}

func (*Value_Unary) isValue_Kind() {}

func (*Value_Binary) isValue_Kind() {}

type ValueBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  bool   `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueBool) Reset() {
	*x = ValueBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueBool) ProtoMessage() {}

func (x *ValueBool) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueBool.ProtoReflect.Descriptor instead.
func (*ValueBool) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{20}
}

func (x *ValueBool) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *ValueBool) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueText) Reset() {
	*x = ValueText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueText) ProtoMessage() {}

func (x *ValueText) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueText.ProtoReflect.Descriptor instead.
func (*ValueText) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{21}
}

func (x *ValueText) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ValueText) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  []byte `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueData) Reset() {
	*x = ValueData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueData) ProtoMessage() {}

func (x *ValueData) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueData.ProtoReflect.Descriptor instead.
func (*ValueData) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{22}
}

func (x *ValueData) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ValueData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueInt8 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  int32  `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueInt8) Reset() {
	*x = ValueInt8{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueInt8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueInt8) ProtoMessage() {}

func (x *ValueInt8) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueInt8.ProtoReflect.Descriptor instead.
func (*ValueInt8) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{23}
}

func (x *ValueInt8) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ValueInt8) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueInt16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  int32  `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueInt16) Reset() {
	*x = ValueInt16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueInt16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueInt16) ProtoMessage() {}

func (x *ValueInt16) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueInt16.ProtoReflect.Descriptor instead.
func (*ValueInt16) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{24}
}

func (x *ValueInt16) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ValueInt16) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  int32  `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueInt32) Reset() {
	*x = ValueInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueInt32) ProtoMessage() {}

func (x *ValueInt32) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueInt32.ProtoReflect.Descriptor instead.
func (*ValueInt32) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{25}
}

func (x *ValueInt32) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ValueInt32) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  int64  `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueInt64) Reset() {
	*x = ValueInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueInt64) ProtoMessage() {}

func (x *ValueInt64) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueInt64.ProtoReflect.Descriptor instead.
func (*ValueInt64) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{26}
}

func (x *ValueInt64) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ValueInt64) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueUInt8 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  uint32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueUInt8) Reset() {
	*x = ValueUInt8{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueUInt8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueUInt8) ProtoMessage() {}

func (x *ValueUInt8) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueUInt8.ProtoReflect.Descriptor instead.
func (*ValueUInt8) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{27}
}

func (x *ValueUInt8) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ValueUInt8) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueUInt16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  uint32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueUInt16) Reset() {
	*x = ValueUInt16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueUInt16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueUInt16) ProtoMessage() {}

func (x *ValueUInt16) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueUInt16.ProtoReflect.Descriptor instead.
func (*ValueUInt16) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{28}
}

func (x *ValueUInt16) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ValueUInt16) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueUInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  uint32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueUInt32) Reset() {
	*x = ValueUInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueUInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueUInt32) ProtoMessage() {}

func (x *ValueUInt32) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueUInt32.ProtoReflect.Descriptor instead.
func (*ValueUInt32) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{29}
}

func (x *ValueUInt32) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ValueUInt32) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueUInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  uint64 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueUInt64) Reset() {
	*x = ValueUInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueUInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueUInt64) ProtoMessage() {}

func (x *ValueUInt64) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueUInt64.ProtoReflect.Descriptor instead.
func (*ValueUInt64) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{30}
}

func (x *ValueUInt64) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ValueUInt64) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueFloat32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  float32 `protobuf:"fixed32,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string  `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueFloat32) Reset() {
	*x = ValueFloat32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueFloat32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueFloat32) ProtoMessage() {}

func (x *ValueFloat32) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueFloat32.ProtoReflect.Descriptor instead.
func (*ValueFloat32) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{31}
}

func (x *ValueFloat32) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ValueFloat32) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueFloat64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  float64 `protobuf:"fixed64,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Source string  `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *ValueFloat64) Reset() {
	*x = ValueFloat64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueFloat64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueFloat64) ProtoMessage() {}

func (x *ValueFloat64) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueFloat64.ProtoReflect.Descriptor instead.
func (*ValueFloat64) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{32}
}

func (x *ValueFloat64) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ValueFloat64) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ValueIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,2,rep,name=Names,proto3" json:"Names,omitempty"`
	// Types that are assignable to Reference:
	//
	//	*ValueIdentifier_Type
	//	*ValueIdentifier_Attribute
	Reference isValueIdentifier_Reference `protobuf_oneof:"Reference"`
}

func (x *ValueIdentifier) Reset() {
	*x = ValueIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueIdentifier) ProtoMessage() {}

func (x *ValueIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueIdentifier.ProtoReflect.Descriptor instead.
func (*ValueIdentifier) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{33}
}

func (x *ValueIdentifier) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (m *ValueIdentifier) GetReference() isValueIdentifier_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *ValueIdentifier) GetType() *TypeReference {
	if x, ok := x.GetReference().(*ValueIdentifier_Type); ok {
		return x.Type
	}
	return nil
}

func (x *ValueIdentifier) GetAttribute() *AttributeReference {
	if x, ok := x.GetReference().(*ValueIdentifier_Attribute); ok {
		return x.Attribute
	}
	return nil
}

type isValueIdentifier_Reference interface {
	isValueIdentifier_Reference()
}

type ValueIdentifier_Type struct {
	Type *TypeReference `protobuf:"bytes,3,opt,name=Type,proto3,oneof"`
}

type ValueIdentifier_Attribute struct {
	Attribute *AttributeReference `protobuf:"bytes,4,opt,name=Attribute,proto3,oneof"`
}

func (*ValueIdentifier_Type) isValueIdentifier_Reference() {}

func (*ValueIdentifier_Attribute) isValueIdentifier_Reference() {}

type ValueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*Value `protobuf:"bytes,1,rep,name=Elements,proto3" json:"Elements,omitempty"`
}

func (x *ValueList) Reset() {
	*x = ValueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueList) ProtoMessage() {}

func (x *ValueList) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueList.ProtoReflect.Descriptor instead.
func (*ValueList) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{34}
}

func (x *ValueList) GetElements() []*Value {
	if x != nil {
		return x.Elements
	}
	return nil
}

type ValueStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*ValueStructField `protobuf:"bytes,1,rep,name=Fields,proto3" json:"Fields,omitempty"`
}

func (x *ValueStruct) Reset() {
	*x = ValueStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueStruct) ProtoMessage() {}

func (x *ValueStruct) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueStruct.ProtoReflect.Descriptor instead.
func (*ValueStruct) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{35}
}

func (x *ValueStruct) GetFields() []*ValueStructField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ValueStructField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ValueStructField) Reset() {
	*x = ValueStructField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueStructField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueStructField) ProtoMessage() {}

func (x *ValueStructField) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueStructField.ProtoReflect.Descriptor instead.
func (*ValueStructField) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{36}
}

func (x *ValueStructField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValueStructField) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type ValueUnary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation OperationUnary `protobuf:"varint,1,opt,name=Operation,proto3,enum=OperationUnary" json:"Operation,omitempty"`
	Value     *Value         `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ValueUnary) Reset() {
	*x = ValueUnary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueUnary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueUnary) ProtoMessage() {}

func (x *ValueUnary) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueUnary.ProtoReflect.Descriptor instead.
func (*ValueUnary) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{37}
}

func (x *ValueUnary) GetOperation() OperationUnary {
	if x != nil {
		return x.Operation
	}
	return OperationUnary_OperationUnaryZero
}

func (x *ValueUnary) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type ValueBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation OperationBinary `protobuf:"varint,1,opt,name=Operation,proto3,enum=OperationBinary" json:"Operation,omitempty"`
	Left      *Value          `protobuf:"bytes,2,opt,name=Left,proto3" json:"Left,omitempty"`
	Right     *Value          `protobuf:"bytes,3,opt,name=Right,proto3" json:"Right,omitempty"`
}

func (x *ValueBinary) Reset() {
	*x = ValueBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueBinary) ProtoMessage() {}

func (x *ValueBinary) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueBinary.ProtoReflect.Descriptor instead.
func (*ValueBinary) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{38}
}

func (x *ValueBinary) GetOperation() OperationBinary {
	if x != nil {
		return x.Operation
	}
	return OperationBinary_OperationBinaryZero
}

func (x *ValueBinary) GetLeft() *Value {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ValueBinary) GetRight() *Value {
	if x != nil {
		return x.Right
	}
	return nil
}

type TypeReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleUID uint64 `protobuf:"varint,1,opt,name=ModuleUID,proto3" json:"ModuleUID,omitempty"`
	TypeUID   uint64 `protobuf:"varint,2,opt,name=TypeUID,proto3" json:"TypeUID,omitempty"`
}

func (x *TypeReference) Reset() {
	*x = TypeReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeReference) ProtoMessage() {}

func (x *TypeReference) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeReference.ProtoReflect.Descriptor instead.
func (*TypeReference) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{39}
}

func (x *TypeReference) GetModuleUID() uint64 {
	if x != nil {
		return x.ModuleUID
	}
	return 0
}

func (x *TypeReference) GetTypeUID() uint64 {
	if x != nil {
		return x.TypeUID
	}
	return 0
}

type TypeSpecifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reference:
	//
	//	*TypeSpecifier_Forward
	//	*TypeSpecifier_Resolved
	Reference isTypeSpecifier_Reference `protobuf_oneof:"Reference"`
}

func (x *TypeSpecifier) Reset() {
	*x = TypeSpecifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSpecifier) ProtoMessage() {}

func (x *TypeSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSpecifier.ProtoReflect.Descriptor instead.
func (*TypeSpecifier) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{40}
}

func (m *TypeSpecifier) GetReference() isTypeSpecifier_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *TypeSpecifier) GetForward() *ForwardReference {
	if x, ok := x.GetReference().(*TypeSpecifier_Forward); ok {
		return x.Forward
	}
	return nil
}

func (x *TypeSpecifier) GetResolved() *ResolvedReference {
	if x, ok := x.GetReference().(*TypeSpecifier_Resolved); ok {
		return x.Resolved
	}
	return nil
}

type isTypeSpecifier_Reference interface {
	isTypeSpecifier_Reference()
}

type TypeSpecifier_Forward struct {
	Forward *ForwardReference `protobuf:"bytes,1,opt,name=Forward,proto3,oneof"`
}

type TypeSpecifier_Resolved struct {
	Resolved *ResolvedReference `protobuf:"bytes,2,opt,name=Resolved,proto3,oneof"`
}

func (*TypeSpecifier_Forward) isTypeSpecifier_Reference() {}

func (*TypeSpecifier_Resolved) isTypeSpecifier_Reference() {}

type ForwardReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reference:
	//
	//	*ForwardReference_Microglot
	//	*ForwardReference_Protobuf
	Reference isForwardReference_Reference `protobuf_oneof:"Reference"`
}

func (x *ForwardReference) Reset() {
	*x = ForwardReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardReference) ProtoMessage() {}

func (x *ForwardReference) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardReference.ProtoReflect.Descriptor instead.
func (*ForwardReference) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{41}
}

func (m *ForwardReference) GetReference() isForwardReference_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *ForwardReference) GetMicroglot() *MicroglotForwardReference {
	if x, ok := x.GetReference().(*ForwardReference_Microglot); ok {
		return x.Microglot
	}
	return nil
}

func (x *ForwardReference) GetProtobuf() string {
	if x, ok := x.GetReference().(*ForwardReference_Protobuf); ok {
		return x.Protobuf
	}
	return ""
}

type isForwardReference_Reference interface {
	isForwardReference_Reference()
}

type ForwardReference_Microglot struct {
	Microglot *MicroglotForwardReference `protobuf:"bytes,1,opt,name=Microglot,proto3,oneof"`
}

type ForwardReference_Protobuf struct {
	Protobuf string `protobuf:"bytes,2,opt,name=Protobuf,proto3,oneof"`
}

func (*ForwardReference_Microglot) isForwardReference_Reference() {}

func (*ForwardReference_Protobuf) isForwardReference_Reference() {}

type MicroglotForwardReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qualifier string    `protobuf:"bytes,1,opt,name=Qualifier,proto3" json:"Qualifier,omitempty"`
	Name      *TypeName `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *MicroglotForwardReference) Reset() {
	*x = MicroglotForwardReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroglotForwardReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroglotForwardReference) ProtoMessage() {}

func (x *MicroglotForwardReference) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroglotForwardReference.ProtoReflect.Descriptor instead.
func (*MicroglotForwardReference) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{42}
}

func (x *MicroglotForwardReference) GetQualifier() string {
	if x != nil {
		return x.Qualifier
	}
	return ""
}

func (x *MicroglotForwardReference) GetName() *TypeName {
	if x != nil {
		return x.Name
	}
	return nil
}

type ResolvedReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference  *TypeReference   `protobuf:"bytes,1,opt,name=Reference,proto3" json:"Reference,omitempty"`
	Parameters []*TypeSpecifier `protobuf:"bytes,2,rep,name=Parameters,proto3" json:"Parameters,omitempty"`
}

func (x *ResolvedReference) Reset() {
	*x = ResolvedReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedReference) ProtoMessage() {}

func (x *ResolvedReference) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedReference.ProtoReflect.Descriptor instead.
func (*ResolvedReference) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{43}
}

func (x *ResolvedReference) GetReference() *TypeReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *ResolvedReference) GetParameters() []*TypeSpecifier {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type AttributeReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleUID    uint64 `protobuf:"varint,1,opt,name=ModuleUID,proto3" json:"ModuleUID,omitempty"`
	TypeUID      uint64 `protobuf:"varint,2,opt,name=TypeUID,proto3" json:"TypeUID,omitempty"`
	AttributeUID uint64 `protobuf:"varint,3,opt,name=AttributeUID,proto3" json:"AttributeUID,omitempty"`
}

func (x *AttributeReference) Reset() {
	*x = AttributeReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeReference) ProtoMessage() {}

func (x *AttributeReference) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeReference.ProtoReflect.Descriptor instead.
func (*AttributeReference) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{44}
}

func (x *AttributeReference) GetModuleUID() uint64 {
	if x != nil {
		return x.ModuleUID
	}
	return 0
}

func (x *AttributeReference) GetTypeUID() uint64 {
	if x != nil {
		return x.TypeUID
	}
	return 0
}

func (x *AttributeReference) GetAttributeUID() uint64 {
	if x != nil {
		return x.AttributeUID
	}
	return 0
}

type CommentBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lines []string `protobuf:"bytes,1,rep,name=Lines,proto3" json:"Lines,omitempty"`
}

func (x *CommentBlock) Reset() {
	*x = CommentBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentBlock) ProtoMessage() {}

func (x *CommentBlock) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentBlock.ProtoReflect.Descriptor instead.
func (*CommentBlock) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{45}
}

func (x *CommentBlock) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type TypeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string           `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Parameters []*TypeSpecifier `protobuf:"bytes,2,rep,name=Parameters,proto3" json:"Parameters,omitempty"`
}

func (x *TypeName) Reset() {
	*x = TypeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_descriptor_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeName) ProtoMessage() {}

func (x *TypeName) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeName.ProtoReflect.Descriptor instead.
func (*TypeName) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{46}
}

func (x *TypeName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeName) GetParameters() []*TypeSpecifier {
	if x != nil {
		return x.Parameters
	}
	return nil
}

var File_descriptor_proto protoreflect.FileDescriptor

var file_descriptor_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xc1,
	0x03, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x49, 0x12, 0x10, 0x0a, 0x03, 0x55,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x07, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x05, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x41, 0x50,
	0x49, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x04,
	0x41, 0x50, 0x49, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x53, 0x44, 0x4b, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x04, 0x2e, 0x53, 0x44, 0x4b, 0x52, 0x04, 0x53, 0x44, 0x4b, 0x73, 0x12, 0x27,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x0a, 0x44, 0x6f, 0x74, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x6f, 0x74,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x44, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x55, 0x52, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x55, 0x52, 0x49, 0x12, 0x20, 0x0a,
	0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x55, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x6f, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x44, 0x6f, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x4d,
	0x0a, 0x09, 0x44, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xe6, 0x02,
	0x0a, 0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4e, 0x0a, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x22, 0x37, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22,
	0xd5, 0x02, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4e, 0x0a, 0x16, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xd1, 0x01, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4e, 0x0a, 0x16, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4e, 0x0a, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x4e, 0x0a, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xf7, 0x02, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x2c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x50, 0x49, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4e, 0x0a, 0x16, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x09, 0x41, 0x50,
	0x49, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x4e, 0x0a, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xf7, 0x02, 0x0a, 0x03, 0x53, 0x44, 0x4b, 0x12, 0x2c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x44, 0x4b, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4e, 0x0a, 0x16, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x09, 0x53, 0x44,
	0x4b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x53, 0x44, 0x4b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x4e, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x4e, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4e, 0x0a, 0x16,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7a, 0x0a, 0x0e,
	0x53, 0x44, 0x4b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30,
	0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x53, 0x44, 0x4b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x53, 0x44, 0x4b,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x54,
	0x79, 0x70, 0x65, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x49, 0x44, 0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x91, 0x02, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a,
	0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a,
	0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x65, 0x0a, 0x15, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf9, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x20, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x04, 0x49, 0x6e, 0x74, 0x38, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74,
	0x38, 0x48, 0x00, 0x52, 0x04, 0x49, 0x6e, 0x74, 0x38, 0x12, 0x23, 0x0a, 0x05, 0x49, 0x6e, 0x74,
	0x31, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x49, 0x6e, 0x74, 0x31, 0x36, 0x48, 0x00, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x23,
	0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x05, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x48,
	0x00, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x05, 0x55, 0x49, 0x6e, 0x74,
	0x38, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x49, 0x6e, 0x74, 0x38, 0x48, 0x00, 0x52, 0x05, 0x55, 0x49, 0x6e, 0x74, 0x38, 0x12, 0x26, 0x0a,
	0x06, 0x55, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x48, 0x00, 0x52, 0x06, 0x55,
	0x49, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x26, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a,
	0x06, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x06, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x12, 0x29, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34,
	0x48, 0x00, 0x52, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x20, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x05, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x22, 0x39, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x39,
	0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74,
	0x38, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x3a, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x49, 0x6e, 0x74,
	0x38, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x3b, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x0b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3c, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x3c, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x44, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x77, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x2e, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0x47, 0x0a, 0x0d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x49, 0x44, 0x22, 0x7d, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x79, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x67, 0x6c,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x67, 0x6c, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x67, 0x6c, 0x6f,
	0x74, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42,
	0x0b, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x58, 0x0a, 0x19,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x67, 0x6c, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x70, 0x0a, 0x12, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x79, 0x70, 0x65, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x49, 0x44, 0x22, 0x24, 0x0a, 0x0c, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x22, 0x4e, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x2a, 0x85, 0x03, 0x0a, 0x0f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x10, 0x06, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x41, 0x50, 0x49, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x41, 0x50, 0x49, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53, 0x44, 0x4b, 0x10, 0x09, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x53, 0x44, 0x4b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x0c,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x53, 0x74, 0x61, 0x72, 0x10, 0x0d, 0x2a, 0x77, 0x0a, 0x0e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x5a, 0x65, 0x72,
	0x6f, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x74,
	0x10, 0x03, 0x2a, 0xa9, 0x04, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x4f, 0x72, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e,
	0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x61, 0x6e, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x10,
	0x09, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x0a, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x42, 0x69, 0x6e, 0x4f, 0x72, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x41, 0x6e,
	0x64, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x69, 0x74, 0x58, 0x6f, 0x72, 0x10, 0x0d, 0x12, 0x1c,
	0x0a, 0x18, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x6f, 0x10, 0x12, 0x42, 0x30,
	0x5a, 0x2e, 0x67, 0x6f, 0x70, 0x6b, 0x67, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x67, 0x6c, 0x6f,
	0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x67,
	0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_descriptor_proto_rawDescOnce sync.Once
	file_descriptor_proto_rawDescData = file_descriptor_proto_rawDesc
)

func file_descriptor_proto_rawDescGZIP() []byte {
	file_descriptor_proto_rawDescOnce.Do(func() {
		file_descriptor_proto_rawDescData = protoimpl.X.CompressGZIP(file_descriptor_proto_rawDescData)
	})
	return file_descriptor_proto_rawDescData
}

var file_descriptor_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_descriptor_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_descriptor_proto_goTypes = []any{
	(AnnotationScope)(0),              // 0: AnnotationScope
	(OperationUnary)(0),               // 1: OperationUnary
	(OperationBinary)(0),              // 2: OperationBinary
	(*Image)(nil),                     // 3: Image
	(*Module)(nil),                    // 4: Module
	(*Import)(nil),                    // 5: Import
	(*DotImport)(nil),                 // 6: DotImport
	(*Struct)(nil),                    // 7: Struct
	(*ReservedRange)(nil),             // 8: ReservedRange
	(*Field)(nil),                     // 9: Field
	(*Union)(nil),                     // 10: Union
	(*Enum)(nil),                      // 11: Enum
	(*Enumerant)(nil),                 // 12: Enumerant
	(*API)(nil),                       // 13: API
	(*APIMethod)(nil),                 // 14: APIMethod
	(*SDK)(nil),                       // 15: SDK
	(*SDKMethod)(nil),                 // 16: SDKMethod
	(*SDKMethodInput)(nil),            // 17: SDKMethodInput
	(*SDKInputReference)(nil),         // 18: SDKInputReference
	(*Annotation)(nil),                // 19: Annotation
	(*Constant)(nil),                  // 20: Constant
	(*AnnotationApplication)(nil),     // 21: AnnotationApplication
	(*Value)(nil),                     // 22: Value
	(*ValueBool)(nil),                 // 23: ValueBool
	(*ValueText)(nil),                 // 24: ValueText
	(*ValueData)(nil),                 // 25: ValueData
	(*ValueInt8)(nil),                 // 26: ValueInt8
	(*ValueInt16)(nil),                // 27: ValueInt16
	(*ValueInt32)(nil),                // 28: ValueInt32
	(*ValueInt64)(nil),                // 29: ValueInt64
	(*ValueUInt8)(nil),                // 30: ValueUInt8
	(*ValueUInt16)(nil),               // 31: ValueUInt16
	(*ValueUInt32)(nil),               // 32: ValueUInt32
	(*ValueUInt64)(nil),               // 33: ValueUInt64
	(*ValueFloat32)(nil),              // 34: ValueFloat32
	(*ValueFloat64)(nil),              // 35: ValueFloat64
	(*ValueIdentifier)(nil),           // 36: ValueIdentifier
	(*ValueList)(nil),                 // 37: ValueList
	(*ValueStruct)(nil),               // 38: ValueStruct
	(*ValueStructField)(nil),          // 39: ValueStructField
	(*ValueUnary)(nil),                // 40: ValueUnary
	(*ValueBinary)(nil),               // 41: ValueBinary
	(*TypeReference)(nil),             // 42: TypeReference
	(*TypeSpecifier)(nil),             // 43: TypeSpecifier
	(*ForwardReference)(nil),          // 44: ForwardReference
	(*MicroglotForwardReference)(nil), // 45: MicroglotForwardReference
	(*ResolvedReference)(nil),         // 46: ResolvedReference
	(*AttributeReference)(nil),        // 47: AttributeReference
	(*CommentBlock)(nil),              // 48: CommentBlock
	(*TypeName)(nil),                  // 49: TypeName
}
var file_descriptor_proto_depIdxs = []int32{
	4,   // 0: Image.Modules:type_name -> Module
	21,  // 1: Module.AnnotationApplications:type_name -> AnnotationApplication
	5,   // 2: Module.Imports:type_name -> Import
	7,   // 3: Module.Structs:type_name -> Struct
	11,  // 4: Module.Enums:type_name -> Enum
	13,  // 5: Module.APIs:type_name -> API
	15,  // 6: Module.SDKs:type_name -> SDK
	20,  // 7: Module.Constants:type_name -> Constant
	19,  // 8: Module.Annotations:type_name -> Annotation
	6,   // 9: Module.DotImports:type_name -> DotImport
	48,  // 10: Import.CommentBlock:type_name -> CommentBlock
	42,  // 11: DotImport.Reference:type_name -> TypeReference
	42,  // 12: Struct.Reference:type_name -> TypeReference
	49,  // 13: Struct.Name:type_name -> TypeName
	9,   // 14: Struct.Fields:type_name -> Field
	10,  // 15: Struct.Unions:type_name -> Union
	8,   // 16: Struct.Reserved:type_name -> ReservedRange
	48,  // 17: Struct.CommentBlock:type_name -> CommentBlock
	21,  // 18: Struct.AnnotationApplications:type_name -> AnnotationApplication
	47,  // 19: Field.Reference:type_name -> AttributeReference
	43,  // 20: Field.Type:type_name -> TypeSpecifier
	22,  // 21: Field.DefaultValue:type_name -> Value
	48,  // 22: Field.CommentBlock:type_name -> CommentBlock
	21,  // 23: Field.AnnotationApplications:type_name -> AnnotationApplication
	47,  // 24: Union.Reference:type_name -> AttributeReference
	48,  // 25: Union.CommentBlock:type_name -> CommentBlock
	21,  // 26: Union.AnnotationApplications:type_name -> AnnotationApplication
	42,  // 27: Enum.Reference:type_name -> TypeReference
	12,  // 28: Enum.Enumerants:type_name -> Enumerant
	8,   // 29: Enum.Reserved:type_name -> ReservedRange
	48,  // 30: Enum.CommentBlock:type_name -> CommentBlock
	21,  // 31: Enum.AnnotationApplications:type_name -> AnnotationApplication
	47,  // 32: Enumerant.Reference:type_name -> AttributeReference
	48,  // 33: Enumerant.CommentBlock:type_name -> CommentBlock
	21,  // 34: Enumerant.AnnotationApplications:type_name -> AnnotationApplication
	42,  // 35: API.Reference:type_name -> TypeReference
	49,  // 36: API.Name:type_name -> TypeName
	14,  // 37: API.Methods:type_name -> APIMethod
	43,  // 38: API.Extends:type_name -> TypeSpecifier
	8,   // 39: API.Reserved:type_name -> ReservedRange
	48,  // 40: API.CommentBlock:type_name -> CommentBlock
	21,  // 41: API.AnnotationApplications:type_name -> AnnotationApplication
	47,  // 42: APIMethod.Reference:type_name -> AttributeReference
	43,  // 43: APIMethod.Input:type_name -> TypeSpecifier
	43,  // 44: APIMethod.Output:type_name -> TypeSpecifier
	48,  // 45: APIMethod.CommentBlock:type_name -> CommentBlock
	21,  // 46: APIMethod.AnnotationApplications:type_name -> AnnotationApplication
	42,  // 47: SDK.Reference:type_name -> TypeReference
	49,  // 48: SDK.Name:type_name -> TypeName
	16,  // 49: SDK.Methods:type_name -> SDKMethod
	43,  // 50: SDK.Extends:type_name -> TypeSpecifier
	8,   // 51: SDK.Reserved:type_name -> ReservedRange
	48,  // 52: SDK.CommentBlock:type_name -> CommentBlock
	21,  // 53: SDK.AnnotationApplications:type_name -> AnnotationApplication
	47,  // 54: SDKMethod.Reference:type_name -> AttributeReference
	17,  // 55: SDKMethod.Input:type_name -> SDKMethodInput
	43,  // 56: SDKMethod.Output:type_name -> TypeSpecifier
	48,  // 57: SDKMethod.CommentBlock:type_name -> CommentBlock
	21,  // 58: SDKMethod.AnnotationApplications:type_name -> AnnotationApplication
	18,  // 59: SDKMethodInput.Reference:type_name -> SDKInputReference
	43,  // 60: SDKMethodInput.Type:type_name -> TypeSpecifier
	42,  // 61: Annotation.Reference:type_name -> TypeReference
	0,   // 62: Annotation.Scopes:type_name -> AnnotationScope
	43,  // 63: Annotation.Type:type_name -> TypeSpecifier
	48,  // 64: Annotation.DescriptorCommentBlock:type_name -> CommentBlock
	42,  // 65: Constant.Reference:type_name -> TypeReference
	43,  // 66: Constant.Type:type_name -> TypeSpecifier
	22,  // 67: Constant.Value:type_name -> Value
	21,  // 68: Constant.AnnotationApplications:type_name -> AnnotationApplication
	48,  // 69: Constant.CommentBlock:type_name -> CommentBlock
	43,  // 70: AnnotationApplication.Annotation:type_name -> TypeSpecifier
	22,  // 71: AnnotationApplication.Value:type_name -> Value
	23,  // 72: Value.Bool:type_name -> ValueBool
	24,  // 73: Value.Text:type_name -> ValueText
	25,  // 74: Value.Data:type_name -> ValueData
	26,  // 75: Value.Int8:type_name -> ValueInt8
	27,  // 76: Value.Int16:type_name -> ValueInt16
	28,  // 77: Value.Int32:type_name -> ValueInt32
	29,  // 78: Value.Int64:type_name -> ValueInt64
	30,  // 79: Value.UInt8:type_name -> ValueUInt8
	31,  // 80: Value.UInt16:type_name -> ValueUInt16
	32,  // 81: Value.UInt32:type_name -> ValueUInt32
	33,  // 82: Value.UInt64:type_name -> ValueUInt64
	34,  // 83: Value.Float32:type_name -> ValueFloat32
	35,  // 84: Value.Float64:type_name -> ValueFloat64
	37,  // 85: Value.List:type_name -> ValueList
	38,  // 86: Value.Struct:type_name -> ValueStruct
	47,  // 87: Value.Enumerant:type_name -> AttributeReference
	36,  // 88: Value.Identifier:type_name -> ValueIdentifier
	40,  // 89: Value.Unary:type_name -> ValueUnary
	41,  // 90: Value.Binary:type_name -> ValueBinary
	42,  // 91: ValueIdentifier.Type:type_name -> TypeReference
	47,  // 92: ValueIdentifier.Attribute:type_name -> AttributeReference
	22,  // 93: ValueList.Elements:type_name -> Value
	39,  // 94: ValueStruct.Fields:type_name -> ValueStructField
	22,  // 95: ValueStructField.Value:type_name -> Value
	1,   // 96: ValueUnary.Operation:type_name -> OperationUnary
	22,  // 97: ValueUnary.Value:type_name -> Value
	2,   // 98: ValueBinary.Operation:type_name -> OperationBinary
	22,  // 99: ValueBinary.Left:type_name -> Value
	22,  // 100: ValueBinary.Right:type_name -> Value
	44,  // 101: TypeSpecifier.Forward:type_name -> ForwardReference
	46,  // 102: TypeSpecifier.Resolved:type_name -> ResolvedReference
	45,  // 103: ForwardReference.Microglot:type_name -> MicroglotForwardReference
	49,  // 104: MicroglotForwardReference.Name:type_name -> TypeName
	42,  // 105: ResolvedReference.Reference:type_name -> TypeReference
	43,  // 106: ResolvedReference.Parameters:type_name -> TypeSpecifier
	43,  // 107: TypeName.Parameters:type_name -> TypeSpecifier
	108, // [108:108] is the sub-list for method output_type
	108, // [108:108] is the sub-list for method input_type
	108, // [108:108] is the sub-list for extension type_name
	108, // [108:108] is the sub-list for extension extendee
	0,   // [0:108] is the sub-list for field type_name
}

func init() { file_descriptor_proto_init() }
func file_descriptor_proto_init() {
	if File_descriptor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_descriptor_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Import); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DotImport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ReservedRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Union); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Enum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Enumerant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*API); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*APIMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SDK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SDKMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SDKMethodInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SDKInputReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Constant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*AnnotationApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ValueBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ValueText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ValueData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ValueInt8); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ValueInt16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ValueInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ValueInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ValueUInt8); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ValueUInt16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ValueUInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ValueUInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ValueFloat32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ValueFloat64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ValueIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*ValueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*ValueStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*ValueStructField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ValueUnary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ValueBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*TypeReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*TypeSpecifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*ForwardReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*MicroglotForwardReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*ResolvedReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*AttributeReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*CommentBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_descriptor_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*TypeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_descriptor_proto_msgTypes[6].OneofWrappers = []any{}
	file_descriptor_proto_msgTypes[19].OneofWrappers = []any{
		(*Value_Bool)(nil),
		(*Value_Text)(nil),
		(*Value_Data)(nil),
		(*Value_Int8)(nil),
		(*Value_Int16)(nil),
		(*Value_Int32)(nil),
		(*Value_Int64)(nil),
		(*Value_UInt8)(nil),
		(*Value_UInt16)(nil),
		(*Value_UInt32)(nil),
		(*Value_UInt64)(nil),
		(*Value_Float32)(nil),
		(*Value_Float64)(nil),
		(*Value_List)(nil),
		(*Value_Struct)(nil),
		(*Value_Enumerant)(nil),
		(*Value_Identifier)(nil),
		(*Value_Unary)(nil),
		(*Value_Binary)(nil),
	}
	file_descriptor_proto_msgTypes[33].OneofWrappers = []any{
		(*ValueIdentifier_Type)(nil),
		(*ValueIdentifier_Attribute)(nil),
	}
	file_descriptor_proto_msgTypes[40].OneofWrappers = []any{
		(*TypeSpecifier_Forward)(nil),
		(*TypeSpecifier_Resolved)(nil),
	}
	file_descriptor_proto_msgTypes[41].OneofWrappers = []any{
		(*ForwardReference_Microglot)(nil),
		(*ForwardReference_Protobuf)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_descriptor_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_descriptor_proto_goTypes,
		DependencyIndexes: file_descriptor_proto_depIdxs,
		EnumInfos:         file_descriptor_proto_enumTypes,
		MessageInfos:      file_descriptor_proto_msgTypes,
	}.Build()
	File_descriptor_proto = out.File
	file_descriptor_proto_rawDesc = nil
	file_descriptor_proto_goTypes = nil
	file_descriptor_proto_depIdxs = nil
}
