package idl

import (
	"google.golang.org/protobuf/types/descriptorpb"

	"gopkg.microglot.org/compiler.go/internal/proto"
)

func (image *Image) ToFileDescriptorSet() (*descriptorpb.FileDescriptorSet, error) {
	return fromImage(image)
}

func fromImage(image *Image) (*descriptorpb.FileDescriptorSet, error) {
	files := make([]*descriptorpb.FileDescriptorProto, 0, len(image.Modules))
	for _, module := range image.Modules {
		file, err := fromModule(module)
		if err != nil {
			return nil, err
		}
		files = append(files, file)
	}
	return &descriptorpb.FileDescriptorSet{
		File: files,
	}, nil
}

func mapFrom[F any, T any](in []*F, f func(*F) (T, error)) ([]T, error) {
	if in != nil {
		out := make([]T, 0, len(in))

		for _, element := range in {
			outElement, err := f(element)
			if err != nil {
				return nil, err
			}
			out = append(out, outElement)
		}

		return out, nil
	}
	return nil, nil
}

func fromModule(module *proto.Module) (*descriptorpb.FileDescriptorProto, error) {
	// TODO 2023.11.03: is it a fatal error to attempt to convert a microglot Module that contains
	// stuff that cannot be represented in protobuf, e.g. SDKs? Or is this conversion allowed to be
	// lossy?

	var dependencies []string
	for _, import_ := range module.Imports {
		dependencies = append(dependencies, import_.ImportedURI)
	}

	messageTypes, err := mapFrom(module.Structs, fromStruct)
	if err != nil {
		return nil, err
	}

	// TODO 2023.11.03: this is a HUGE HACK. I want to be able to `protoc --descriptor_set_in=... --go_out=...`
	// as a way to diff the code generated by a .proto directly from protoc vs. one that has been converted
	// to and from a microglot descriptor... but the conversion is currently dropping "options", and that's
	// a big hairball; my shortcut is to just hard-code a goPackage here, for now.
	goPackage := "gopkg.microglot.org/compiler.go/internal/proto"

	return &descriptorpb.FileDescriptorProto{
		Name:       &module.URI,
		Package:    &module.ProtobufPackage,
		Dependency: dependencies,
		// PublicDependency
		// WeakDependency
		MessageType: messageTypes,
		// EnumType
		// Service
		// Extension

		// TODO 2023.11.03: as above, this is a big hard-coded hack that needs to be removed!
		Options: &descriptorpb.FileOptions{
			GoPackage: &goPackage,
		},

		// SourceCodeInfo
		// Syntax
		// Edition
	}, nil
}

func fromStruct(struct_ *proto.Struct) (*descriptorpb.DescriptorProto, error) {
	fields, err := mapFrom(struct_.Fields, fromField)
	if err != nil {
		return nil, err
	}

	return &descriptorpb.DescriptorProto{
		Name:  &struct_.Name.Name,
		Field: fields,
		// Extension
		// NestedType
		// EnumType
		// ExtensionRange
		// OneofDecl
		// ReservedRange
		// ReservedName
	}, nil
}

func fromField(field *proto.Field) (*descriptorpb.FieldDescriptorProto, error) {
	number := (int32)(field.Reference.AttributeUID)
	return &descriptorpb.FieldDescriptorProto{
		Name:   &field.Name,
		Number: &number,
		// Label
		// Type
		// TypeName
		// Extendee
		// DefaultValue
		// OneofIndex
		// JsonName
		// Options
		// Proto3Optional
	}, nil
}
